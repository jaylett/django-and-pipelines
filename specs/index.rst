The assets-manifest format
==========================

Purpose
-------

The *assets-manifest* file documents where a project's assets can be found,
no matter how complex the asset pipeline is.

It is an interoperable format between web frameworks and assets pipelines:
it maps asset names expected by the framework (e.g ``app.js``) to the actual file generated by the pipeline.

A typical asset pipeline go from source files, through transpiler / concatenation / minification, and output a single file -- including a hash of the content in the filename (e.g ``app-9f37baa7298.js``).


Concepts
--------

logical path
    The virtual name describing one of the files generated by the pipeline (e.g ``app/main.css``, ``vendor.js``).
    This is the shared key used to match a web framework's expected file with the pipeline's actual output.

    It is a unicode string of arbitrary length.


asset path
    The physical location of a specific version of an asset;
    this can be:

    - A relative filesystem path (e.g ``app/main-677eb3ddf0a.js``)
    - An URL (``https://cdn.example.org/jquery/jquery-1.14.5.js``)
    - A protocol-independent URL (``//cdn.example.org/jqueryr/jquery-1.14.5.js``)


.. note:: All relative paths **MUST** be relative to the folder containing the *assets-manifest* file.


File formats
------------

Version 1.0
"""""""""""

An *assets-manifest* file is a JSON file, usually named ``assets-manifest.json``.
Its toplevel entry **MUST** be a dictionary.

Example:

.. code-block:: json

    {
        "<projectname>-version": "1.0",
        "assets": {
            "app.js.map": "app-9f37baa7298.js.map",
            "app.js": "app-677eb3ddf0a.js"
        },
        "files": {
            "app-9f37baa7298.js.map": {
                "logical_path": "app.js.map",
                "size": 324424,
                "mtime": "2015-11-07T13:40:32+00:00",
                "digest": "9f37baa7298"
            }
        },
        "metadata": {
            "generated-by": "frobnicator v1.234",
            "generated-on": "2015-11-07T13:42:22+00:00"
        }
    }


.. data:: assets-manifest-version

               **REQUIRED**, the version of this specification used by the file


.. data:: assets

               **REQUIRED**, this maps an asset's logical path to the actual asset path.

.. data:: files

    **OPTIONAL**, provides additional metadata about an asset file
    (i.e the value of an entry of the :attr:`assets` map).

    This dictionary maps an asset path to related metadata;
    pipelines **MAY** provide the following entries:

    .. attribute:: logical_path

        *string*, the name of the logical path to which this file relates

    .. attribute:: size

        *integer*, the size (in bytes) of the asset file

    .. attribute:: mtime

        *ISO8601 datetime*, when the asset file was last modified

    .. attribute:: digest

        *hex string*, the hexadecimal-encoded digest of the file

    .. attribute:: sources

        *list of paths*, the relative path to the files used to build this asset

    .. attribute:: sourcemap_path

        *path*, the relative path to the sourcemap for this file.

.. data:: metadata

    **OPTIONAL**, additional metadata about the pipeline processing.

    Valid fields are:

    .. attribute:: generated-by

        *text*, a free description of the software that generated this assets-manifest

    .. attribute:: generated-on

        *ISO8601 datetime*, when the assets-manifest file was generated

.. note:: Implementations **MAY** add additional entries in the ``metadata`` and ``files`` sections, 
          provided the name of these entries starts with ``x-``.



Simplified version
""""""""""""""""""

A simplified version of the format is available for simpler pipelines;
in that case, the JSON file only contains the *assets* map:

.. code-block:: json

    {
      "app.js.map": "app-9f37baa7298.js.map",
      "app.js": "app-677eb3ddf0a.js",
      "bootstrap.css": "https://cdn.example.org/bootstrap.css"
    }


Determining an ``assets-manifest.json`` version
-----------------------------------------------

In order to ensure compatibility with the simplified version and with sprocket/broccoli manifests,
implementation **SHOULD** use the following heuristic to determine the version of an *assets-manifest* file:

- If the file doesn't parse as JSON or its toplevel is not a dictionary, reject it.
- If the ``assets-manifest-version`` key is available, use that to parse the file.
- Otherwise, if an ``assets`` key is provided and maps to a dictionary, parse with verion ``1.0``
- Otherwise, expect a simplified version.
